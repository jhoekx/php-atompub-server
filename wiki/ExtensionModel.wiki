#summary Description of some possible ways to extend php-atompub-server.

= Introduction =

This document explains the built-in extensibility models. Three different customizations are possible: the feed template model, the event model and the custom store.

= The Feed Template model =

When creating a feed for a collection, `php-atompub-server` looks in the `templates` subdirectory for `feed_{$collection_name}.xml`. This file will be used as the basis, to which entries are added.

This extension mechanism allows the addition of for example copyright information, or a default author to the feed.

= The Event Model =

When creating a App_Collection object, the Server will look into the `templates` subdirectory for a file `collection_{$collection_name}.php`. This file should contain a class `App_Collection_{$collection_name}` that extends `App_Collection`.

This class can override existing methods of the collection, but it's also possible (and far easier) to attach an eventlistener to the collection.

Take a look at this example:

{{{
class App_Collection_test extends App_Collection {

	public function __construct($name, $store, $service) {
		parent::__construct($name, $store, $service);
		
		$this->addEventListener("entry_create", $this, "on_entry_create");
	}
	
	public function on_entry_create($event) {
		$entry = $event->entry;
		
		$doc = $entry->get_document();
		
		$link = $doc->createElementNS("http://www.w3.org/2005/Atom","link");
		$link->setAttribute("rel","alternate");
		$link->setAttribute("type","text/html");
		
		$uri = new URI("/news/".$entry->name);
		$link->setAttribute("href", $uri);
		
		$doc->documentElement->appendChild($link);
	}

	public function give_name($slug) {
		return date("Y")."/".date("m")."/".date("d")."/".$slug;
	}

}
}}}

This class will be used for all operations in the "test" collection. It does two things: a link to a webpage is added to the entry and the naming conventions for entries in the collection are changed.